000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID. DDA.
000300*---------------------------------------------------------------
000400* I declare that the assignment here submitted is original 
000500* except for sourcematerial explicitly acknowledged. I also
000600* acknowledge that I am aware of University policy and regulations
000700* on honesty in academic work, and of the disciplinary guidelines
000800* and procedures applicable to breaches of such policy and
000900* regulations, as contained in the website
001000* http://www.cuhk.edu.hk/policy/academichonesty/
001100* Assignment 1
001200* Name: ZHUO JIACHENG
001300* Student ID: 1155058590
001400* Email Addr: ZHUOJCH@LINK.CUHK.EDU.HK(IN LOWERCASE)
001500* 
001600*---------------------------------------------------------------
001700 ENVIRONMENT DIVISION.
001800 
001900 INPUT-OUTPUT SECTION.
002000 FILE-CONTROL.
002100     SELECT OUTPUT-FILE
002200          ASSIGN TO DISK
002300          ORGANIZATION IS LINE SEQUENTIAL.
002400
002500     SELECT INPUT-FILE
002600          ASSIGN TO DISK
002700          ORGANIZATION IS LINE SEQUENTIAL
002800          FILE STATUS IS FILE-OPEN-STATUS.
002900
003000 DATA DIVISION.
003100 FILE SECTION.
003200 FD  OUTPUT-FILE
003300     LABEL RECORDS ARE STANDARD
003400     VALUE OF FILE-ID IS "output.txt".
003500 01  OUTPUT-RECORD.
003600     03  OUTPUT-POINTS OCCURS 79 TIMES.
003700     05  OUTPUT-POINT                PIC X.
003800
003900 FD  INPUT-FILE
004000     LABEL RECORDS ARE STANDARD
004100     VALUE OF FILE-ID IS "input.txt".
004200 01  INPUT-RECORD.
004300     03  POINTX OCCURS 2 TIMES.
004400     05  DIGIT-OF-POINTX             PIC 9.
004500     03  POINTY OCCURS 3 TIMES.
004600     05  DIGIT-OF-POINTY             PIC 9.
004700
004800*===============================================================
004900*-----------------------START DEFINING VAR----------------------
005000*===============================================================
005100 WORKING-STORAGE SECTION.
005200* THE FOLLOWING TWO VAR ARE FOR TABLE OPERATION.
005300 01  CUR-ROW                         PIC 99 VALUE 1.
005400 01  CUR-COL                         PIC 99 VALUE 1.
005500* THE FOLLOWING FIVE VAR ARE FOR FILE READIN.
005600 01  FILE-OPEN-STATUS                PIC XX.
005700 01  NUM-OF-INPUT                    PIC 99 VALUE 1.
005800 01  POINT1X                         PIC 99 VALUE 1.
005900 01  POINT1Y                         PIC 99 VALUE 1.
006000 01  POINT2X                         PIC 99 VALUE 1.
006100 01  POINT2Y                         PIC 99 VALUE 1.
006200* THE FOLLOWING VAR ARE FOR DRAWING LINES IN BUFFER
006300 01  ROW-DRAWON                      PIC 99.
006400 01  COL-DRAWON                      PIC 99.
006500 01  STEP-TO-MOVE                    PIC S99V9(8).
006600 01  SLOPE                           PIC S9(9)V9(9).
006700 01  ABS-SLO                         PIC 9(9)V9(9).
006800 01  CNT                             PIC 99 VALUE 1.
006900 01  SIGNX                           PIC S9 VALUE 1.
007000 01  SIGNY                           PIC S9 VALUE 1.
007100* THIS IS THE BUFFER TABLE. IT IS CONTROLLED BY CUR-ROW CUR-COL.
007200* THROUGHOUT THE ENTIRE PROGRAM, BF IS SHORT FOR BUFFER.
007300 01  BF-RECORD.
007400     03 BF-ROWS OCCURS 23 TIMES.
007500          05 BF-POINTS OCCURS 79 TIMES.
007600          07 BF-POINT                PIC X.
007700
007800*===============================================================
007900*------------------START MAIN PARAGRAPH-------------------------
008000* THE BASIC IDEA IS AS FOLLOW.
008100* READIN LOOP.(USING GO TO)
008200*     AFTER READIN A PAIR OF POINTS, CALL THE DRAW LINE FUNCTION.
008300*     THE FUNCTION MARKS CORRESPONDING POINTS '*' IN THE BUFFER.
008400* END READIN LOOP. (JUDGE USING NUM-OF-INPUT)
008500* WRITE THE BUFFER TO FILE.
008600*===============================================================
008700 PROCEDURE DIVISION.
008800 MAIN-LOGIC SECTION.
008900 PROGRAM-BEGIN.
009000      PERFORM OPENING-PROCEDURE.
009100      PERFORM INIT-TABLE.
009200
009300*-----PREPARE FOR THE READIN LOOP
009400 READIN-NUM-OF-INPUT.
009500      READ INPUT-FILE.
009600      MOVE DIGIT-OF-POINTX(2) TO NUM-OF-INPUT.
009700      IF DIGIT-OF-POINTX(1) NOT = SPACE
009800      COMPUTE NUM-OF-INPUT=DIGIT-OF-POINTX(1)*10 + NUM-OF-INPUT.
009900
010000*-----PERFORM THE READIN LOOP.
010100 KEEP-READIN.
010200      READ INPUT-FILE.
010300      PERFORM LOAD-READIN-TO-POINT2XY.
010400      IF CUR-ROW = 1 GO TO NEW-TO-OLD.
010500      MOVE 1 TO CNT.
010600      PERFORM ADD-LINE-TO-BUFFER.
010700 NEW-TO-OLD.
010800      MOVE POINT2X TO POINT1X.
010900      MOVE POINT2Y TO POINT1Y.
011000      ADD 1 TO CUR-ROW.
011100      IF CUR-ROW < NUM-OF-INPUT + 1 GO TO KEEP-READIN.
011200*-----END LOOP.
011300 
011400 OUTPUT-TO-FILE.
011500      MOVE 23 TO CUR-ROW.
011600      PERFORM WRITE-TO-FILE.
011700      PERFORM CLOSING-PROCEDURE.
011800
011900 PROGRAM-DONE.
012000      STOP RUN.
012100
012200*===============================================================
012300*-----------------------UTILITY PARAGRAPH-----------------------
012400*===============================================================
012500 OPENING-PROCEDURE.
012600      OPEN OUTPUT OUTPUT-FILE.
012700      OPEN INPUT INPUT-FILE.
012800      IF FILE-OPEN-STATUS NOT = '00' GO TO OPEN-ERR-HANDLING.
012900
013000 
013100 CLOSING-PROCEDURE.
013200      CLOSE OUTPUT-FILE.
013300      CLOSE INPUT-FILE.
013400 
013500 
013600*-----AFTER INIT-TABLE, THE FIRST COL OF THE TABLE ARE ALL '|'
013700*-----THE FIRST ROW OF THE TABLE ARE ALL '-'
013800*-----THE ORIGIN POINT IS '+'
013900 INIT-TABLE.
014000      PERFORM INIT-ALL-TO-SPACE.
014100      MOVE 1 TO CUR-ROW.
014200      MOVE 1 TO CUR-COL.
014300      PERFORM INIT-COL.
014400      PERFORM INIT-ROW.
014500      MOVE '+' TO BF-POINT(1, 1).
014600 INIT-ALL-TO-SPACE.
014700      MOVE ' ' TO BF-POINT(CUR-ROW, CUR-COL).
014800      IF CUR-COL = 79
014900      MOVE 1 TO CUR-COL
015000      COMPUTE CUR-ROW = CUR-ROW + 1.
015100      COMPUTE CUR-COL = CUR-COL + 1.
015200      IF CUR-ROW < 24 GO TO INIT-ALL-TO-SPACE.
015300 INIT-COL.
015400      MOVE '|' TO BF-POINT(CUR-ROW, 1).
015500      COMPUTE CUR-ROW = CUR-ROW + 1.
015600      IF CUR-ROW < 24 GO TO INIT-COL.
015700      MOVE 1 TO CUR-ROW.
015800 INIT-ROW.
015900      MOVE '-' TO BF-POINT(1, CUR-COL).
016000      COMPUTE CUR-COL = CUR-COL + 1.
016100      IF CUR-COL < 80 GO TO INIT-ROW.
016200      MOVE 1 TO CUR-COL.
016300 
016400
016500*-----AFTER LOAD-READIN-TO-POINT2XY
016600*-----(1) THE NEXT (X,Y) COORDINATE IS READIN,
016700*-----    AND STORED AT (POINT2X, POINT2Y).
016800*-----(2) THE CURSOR OF THE INPUT-FILE IS MOVED ONE LINE DOWNWARD.
016900 LOAD-READIN-TO-POINT2XY.
017000      MOVE DIGIT-OF-POINTX(2) TO POINT2X.
017100      IF DIGIT-OF-POINTX(1) NOT = SPACE
017200            COMPUTE POINT2X = DIGIT-OF-POINTX(1) * 10 + POINT2X.
017300      MOVE DIGIT-OF-POINTY(3) TO POINT2Y.
017400      IF DIGIT-OF-POINTY(2) NOT = SPACE
017500            COMPUTE POINT2Y = DIGIT-OF-POINTY(2) * 10 + POINT2Y.
017600      ADD 1 TO POINT2X.
017700      ADD 1 TO POINT2Y.
017800 
017900 
018000*-----AFTER ADD-LINE-TO-BUFFER THE BUFFER(BF-POINT) ARE MODIFIED. 
018100*-----(1) (POINT1X, POINT1Y) (POINT2X, POINT2Y) ARE CONNECTED VIA
018200*-----    DDA METHOD.
018300*-----(2) THE CORRESPONDING POINTS ON THE LINE IS MARKED AS '*'.
018400*-----IMPLEMENTATION NOTE:
018500*-----    BUFFER.ROW -> COORDINATE.Y
018600*-----    BUFFER.COL -> COORDINATE.X
018700 ADD-LINE-TO-BUFFER.
018800      MOVE POINT1X TO COL-DRAWON.
018900      MOVE POINT1Y TO ROW-DRAWON.
019000      IF POINT2X - POINT1X < 0 MOVE -1 TO SIGNX.
019100      IF POINT2X - POINT1X NOT < 0 MOVE 1 TO SIGNX.
019200      IF POINT2Y - POINT1Y < 0 MOVE -1 TO SIGNY.
019300      IF POINT2Y - POINT1Y NOT < 0 MOVE 1 TO SIGNY.
019400      COMPUTE SLOPE = (POINT2Y - POINT1Y) / (POINT2X - POINT1X).
019500      IF SLOPE > 0 MOVE SLOPE TO ABS-SLO.
019600      IF SLOPE NOT > 0 COMPUTE ABS-SLO = SLOPE * -1.
019700      PERFORM KEEP-DRAWING.
019800      MOVE '*' TO BF-POINT(POINT2Y, POINT2X).
019900 KEEP-DRAWING.
020000      MOVE '*' TO BF-POINT(ROW-DRAWON, COL-DRAWON).
020100      IF SLOPE NOT > 1 AND SLOPE NOT < -1
020200            COMPUTE STEP-TO-MOVE ROUNDED = CNT * ABS-SLO
020300            COMPUTE ROW-DRAWON ROUNDED = POINT1Y +
020400                                         STEP-TO-MOVE * SIGNY
020500            COMPUTE COL-DRAWON = POINT1X + CNT * SIGNX.
020600      IF SLOPE > 1 OR SLOPE < -1
020700            COMPUTE ROW-DRAWON = POINT1Y + CNT * SIGNY
020800            COMPUTE STEP-TO-MOVE ROUNDED = CNT / ABS-SLO
020900            COMPUTE COL-DRAWON ROUNDED = POINT1X + 
021000                                         SIGNX * STEP-TO-MOVE.
021100      ADD 1 TO CNT.
021200      IF ROW-DRAWON NOT = POINT2Y OR COL-DRAWON NOT = POINT2X
021300          GO TO KEEP-DRAWING.
021400      
021500 
021600 WRITE-TO-FILE.
021700      WRITE OUTPUT-RECORD FROM BF-ROWS(CUR-ROW).
021800      COMPUTE CUR-ROW = CUR-ROW - 1.
021900      IF CUR-ROW > 0 GO TO WRITE-TO-FILE.
022000 
022100 
022200 OPEN-ERR-HANDLING.
022300      DISPLAY 'File Open Error. Program terminated.'.
022400      STOP RUN.
022500
